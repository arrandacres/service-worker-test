{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["App","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","checkForUpdates","registration","config","update","waiting","hasWaitingSerivceWorker","onUpdate","registerValidSW","swUrl","navigator","serviceWorker","register","then","setInterval","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","toast","info","onClick","event","toastId","preventDefault","dismiss","stateChangeEvent","postMessage","type","refreshPage","autoClose","position","closeOnClick","module","exports"],"mappings":"6PA8BeA,G,MAvBH,WACV,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,wCCZFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAiDN,SAASC,EAAgBC,EAAyCC,GAChED,EAAaE,SALf,SAAiCF,GAC/B,QAASA,EAAaG,QAKtBC,CAAwBJ,IAAiBC,GACrCA,EAAOI,SAASL,EAAaG,SAGnC,SAASG,EAAgBC,EAAeN,GACtCO,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAX,GAEJL,OAAOiB,aAAY,kBACjBb,EAAgBC,EAAcC,KAC9B,KAEFF,EAAgBC,EAAcC,GAE9BD,EAAaa,cAAgB,WAC3B,IAAMC,EAAmBd,EAAae,WACd,MAApBD,IAIJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEnB,GAAUA,EAAOI,UACnBJ,EAAOI,SAASS,IAMlBK,QAAQC,IAAI,6CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MC7GjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,UDmB1C,SAAkBzB,GACvB,GAA6C,kBAAmBO,UAAW,CAMzE,GAJkB,IAAImB,IACpBC,uBACAjC,OAAOC,SAASN,MAEJuC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,uBAAN,sBAEPnC,IA6EV,SAAiCc,EAAeN,GAE9C8B,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAX,GACjCA,EAAauC,aAAa5B,MAAK,WAC7BhB,OAAOC,SAAS4C,eAKpBlC,EAAgBC,EAAON,MAG1BoB,OAAM,WACLF,QAAQC,IACN,oEApGAqB,CAAwBlC,EAAON,GAI/BO,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCQ,QAAQC,IACN,iHAMJd,EAAgBC,EAAON,OCb/BQ,CAJkD,CAC9CJ,SAfiB,SAACI,GAGlBiC,IAAMC,KACF,6DAC2B,IACvB,4BAAQC,QAAS,SAAAC,GAAK,OAvBd,SAACpC,EAAqCqC,GAAtC,OAA2D,SAC3ED,GAEAA,EAAME,iBACNL,IAAMM,QAAQF,GACVrC,IACAA,EAAcqB,iBAAiB,eAAe,SAAAmB,GAEe,cAApDA,EAAiB1D,OAAyB0B,OAE3CtB,OAAOC,SAAS4C,QAAO,MAG/B/B,EAAcyC,YAAY,CAAEC,KAAM,mBAUJC,CAAY3C,EALvB,oBAKW2C,CAAoCP,KAA9D,mDAIJ,CAAEC,QATiB,oBASRO,WAAW,EAAOC,SAAU,aAAcC,cAAc,Q,kBCpC3EC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.605d7105.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport image from './image.jpg'\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <ToastContainer/>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <h1>v0.2</h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport type Config = {\n  onUpdate: (registration: ServiceWorker) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction hasWaitingSerivceWorker(registration: ServiceWorkerRegistration) {\n  return !!registration.waiting;\n}\n\nfunction checkForUpdates(registration: ServiceWorkerRegistration, config?: Config) {\n  registration.update();\n  hasWaitingSerivceWorker(registration) && config &&\n      config.onUpdate(registration.waiting!); \n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n      window.setInterval(() => \n        checkForUpdates(registration, config)\n      , 30000 /* 5 minutes */);\n      \n      checkForUpdates(registration, config);\n      \n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(installingWorker);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { toast, ToastId } from 'react-toastify';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconst refreshPage = (serviceWorker: ServiceWorker | null, toastId: ToastId) => (\n    event: React.MouseEvent<HTMLButtonElement>\n) => {\n    event.preventDefault();\n    toast.dismiss(toastId);\n    if (serviceWorker) {\n        serviceWorker.addEventListener('statechange', stateChangeEvent => {\n            if (\n                (stateChangeEvent.target as ServiceWorker).state === 'activated'\n            ) {\n                window.location.reload(true);\n            }\n        });\n        serviceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n};\n\nconst handleUpdate = (serviceWorker: ServiceWorker) => {\n    let toastId: ToastId = 'updates-available';  \n\n    toast.info(\n        <>\n            Updates are available;{' '}\n            <button onClick={event => refreshPage(serviceWorker, toastId)(event)}>\n                Click here to refresh and receive the updates.\n            </button>\n        </>,\n        { toastId, autoClose: false, position: 'top-center', closeOnClick: false}\n    );\n};\n\nconst serviceWorkerConfig: serviceWorker.Config = {\n    onUpdate: handleUpdate\n}\n\nserviceWorker.register(serviceWorkerConfig);\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}