{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","className","src","logo","alt","href","target","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","setInterval","console","log","update","waiting","hasWaitingSerivceWorker","onUpdate","onupdatefound","installingWorker","installing","onstatechange","state","controller","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","toastId","toast","info","onClick","event","preventDefault","dismiss","stateChangeEvent","postMessage","type","refreshPage","autoClose","position","closeOnClick","success","hideProgressBar","pauseOnHover"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,kC,2KC2B5BC,G,MAtBH,WACV,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,eAQA,wC,OCTFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAkDN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GAEJX,OAAOY,aAAY,WACjBC,QAAQC,IAAI,mCACZH,EAAaI,SAXrB,SAAiCJ,GAC/B,QAASA,EAAaK,QAWhBC,CAAwBN,IACpBL,EAAOY,SAASP,EAAaK,WAClC,KAEDL,EAAaQ,cAAgB,WAC3BN,QAAQC,IAAI,mBACZ,IAAMM,EAAmBT,EAAaU,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfhB,UAAUC,cAAcgB,YAI1BX,QAAQC,IACN,iHAKFR,EAAOY,SAASE,KAKhBP,QAAQC,IAAI,sCAGRR,GAAUA,EAAOmB,WACnBnB,EAAOmB,UAAUL,WAO5BM,OAAM,SAAAC,GACLd,QAAQc,MAAM,4CAA6CA,MC5GjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,UDoBlC,SAAkBzB,GAC/B,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIyB,IACpBC,uBACAjC,OAAOC,SAASN,MAEJuC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM4B,uBAAN,sBAEPnC,IA2EV,SAAiCO,EAAeC,GAE9C8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B3B,MAAK,SAAA4B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CnC,UAAUC,cAAcmC,MAAMjC,MAAK,SAAAC,GACjCA,EAAaiC,aAAalC,MAAK,WAC7BV,OAAOC,SAAS4C,eAKpBzC,EAAgBC,EAAOC,MAG1BoB,OAAM,WACLb,QAAQC,IACN,oEAlGAgC,CAAwBzC,EAAOC,GAI/BC,UAAUC,cAAcmC,MAAMjC,MAAK,WACjCG,QAAQC,IACN,iHAMJV,EAAgBC,EAAOC,OCF/BG,CALoC,CAChCS,SA1BiB,SAACV,GAClB,IAAIuC,EAA0B,KAE9BlC,QAAQC,IAAI,uBAEZiC,EAAUC,IAAMC,KACZ,6DAC2B,IACvB,4BAAQC,QAAS,SAAAC,GAAK,OAzBd,SAAC3C,EAAqCuC,GAAtC,OAA2D,SAC3EI,GAEAA,EAAMC,iBACNJ,IAAMK,QAAQN,GACVvC,IACAA,EAAc2B,iBAAiB,eAAe,SAAAmB,GAEe,cAApDA,EAAiB1D,OAAyB2B,OAE3CvB,OAAOC,SAAS4C,QAAO,MAG/BrC,EAAc+C,YAAY,CAAEC,KAAM,mBAYJC,CAAYjD,EAAeuC,EAA3BU,CAAqCN,KAA/D,mDAIJ,CAAEO,WAAW,EAAOC,SAAU,aAAcC,cAAc,KAe9DnC,UAXkB,WAClBuB,IAAMa,QACF,8EAGA,CAAEF,SAAU,aAAcG,iBAAiB,EAAMC,cAAc,S","file":"static/js/main.bbd9f592.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport image from './image.jpg'\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <h1>v0.4</h1>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport type Config = {\n  onSuccess: (registration?: ServiceWorker) => void;\n  onUpdate: (registration: ServiceWorker) => void;\n};\n\nexport default function register(config: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction hasWaitingSerivceWorker(registration: ServiceWorkerRegistration) {\n  return !!registration.waiting;\n}\n\nfunction registerValidSW(swUrl: string, config: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n\n      window.setInterval(() => {\n        console.log('Automatic Service Worker update');\n        registration.update();\n        hasWaitingSerivceWorker(registration) &&\n            config.onUpdate(registration.waiting!);\n    }, 30000 /* 5 minutes */);\n\n      registration.onupdatefound = () => {\n        console.log('Update Found...')\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              config.onUpdate(installingWorker);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(installingWorker);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { toast, ToastId } from 'react-toastify';\nimport register, {Config} from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nconst refreshPage = (serviceWorker: ServiceWorker | null, toastId: ToastId) => (\n    event: React.MouseEvent<HTMLButtonElement>\n) => {\n    event.preventDefault();\n    toast.dismiss(toastId);\n    if (serviceWorker) {\n        serviceWorker.addEventListener('statechange', stateChangeEvent => {\n            if (\n                (stateChangeEvent.target as ServiceWorker).state === 'activated'\n            ) {\n                window.location.reload(true);\n            }\n        });\n        serviceWorker.postMessage({ type: 'SKIP_WAITING' });\n    }\n};\n\nconst handleUpdate = (serviceWorker: ServiceWorker) => {\n    let toastId: ToastId | null = null;  \n\n    console.log('Handling Updates...')\n\n    toastId = toast.info(\n        <>\n            Updates are available;{' '}\n            <button onClick={event => refreshPage(serviceWorker, toastId!)(event)}>\n                Click here to refresh and receive the updates.\n            </button>\n        </>,\n        { autoClose: false, position: 'top-center', closeOnClick: false}\n    );\n};\n\nconst handleSuccess = () => {\n    toast.success(\n        <>\n            Successfully updated to latest version\n        </>,\n        { position: 'top-center', hideProgressBar: true, pauseOnHover: true }\n    );\n};\n\nconst serviceWorkerConfig: Config = {\n    onUpdate: handleUpdate,\n    onSuccess: handleSuccess\n}\n\nregister(serviceWorkerConfig);\n"],"sourceRoot":""}